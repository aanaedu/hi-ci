# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# ENVIORNMENT NAMES
# DEPLOY_STACK_NAME,

commands:
  print_pipeline_id:
    description: "A command that prints the workflow ID"
    steps:
      - run: echo $CIRCLE_WORKFLOW_ID

  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name stack-$CIRCLE_WORKFLOW_ID

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/base:stable
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"

  print_hello:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run:
          name: "Say hello"
          command: "echo Hello"

  print_world:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run:
          name: "Say world"
          command: "echo World"

  print_env_name:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run:
          name: "Say env name"
          command: |
            echo $A_NAME
  
  save_hello_world_output:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run:
          name: "Save file"
          command: |
            echo "text to output here" > ~/output.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - output.txt

  print_output_file:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: "View saved file"
          command: |
            cat ~/output.txt

  test_command:
    docker: 
      - image: cimg/base:stable
    steps:
      - print_pipeline_id

  test_when_fail:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: return 1
      - run: 
          name: Rollback previous build
          command: echo "Rolling back previous build..."
          when: on_fail
  
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create stack
          command: |
            aws cloudformation deploy \
              --stack-name stack-$CIRCLE_WORKFLOW_ID \
              --template-file template.yml
      - destroy_environment

  config_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ['df:0b:64:c8:0c:8b:f8:7f:92:b9:8f:24:8a:8e:a8:17']
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run: ls -la scripts/ansible
      - run: 
          name: Configure ansible
          command: |
            mv scripts/ansible/ansible.cfg ~/.ansible.cfg
      - run:
          name: Update inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> scripts/ansible/inventory.txt
      - run:
          name: Config server
          command: |
            ansible-playbook -i scripts/ansible/inventory.txt scripts/ansible/main-remote.yml
      - destroy_environment

  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run:
          name: Smoke test
          command: |
            if curl -s --head https://blog.udacity.com
            then
              return 0
            else
              return 1
            fi
      - destroy_environment

  # Executes the bucket.yml - Deploy an S3 bucket, and interface with that bucket to synchronize the files between local and the bucket.
  # Note that the `--parameter-overrides` let you specify a value that override parameter value in the bucket.yml template file.
  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute bucket.yml - Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
            --template-file bucket.yml \
            --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
      # Uncomment the step below if yoou wish to upload all contents of the current directory to the S3 bucket
      - run: aws s3 sync ./public s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete

  # Fetch and save the pipeline ID (bucket ID) responsible for the last release.
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - textfile.txt

  # Executes the cloudfront.yml template that will modify the existing CloudFront Distribution, change its target from the old bucket to the new bucket - `mybucket-${CIRCLE_WORKFLOW_ID:0:7}`. 
  # Notice here we use the stack name `production-distro` which is the same name we used while deploying to the S3 bucket manually.
  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"

  # Destroy the previous production version's S3 bucket and CloudFormation stack. 
  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous production version's S3 bucket and CloudFormation stack. 
          # Use $OldBucketID environment variable or mybucket644752792305 below.
          # Similarly, you can create and use $OldStackID environment variable in place of production-distro 
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive
          #  aws cloudformation delete-stack --stack-name production-distro 
          #  aws cloudformation delete-stack --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7}
          #  aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  create_infrastructure_workflow:
    jobs:
      - create_and_deploy_front_end
      - get_last_deployment_id
      - promote_to_production:
          requires:
              - create_and_deploy_front_end
      - clean_up_old_front_end:
          requires:
              - get_last_deployment_id
              - promote_to_production
